#!/usr/bin/env python3
"""
Verificador de Integridade de Arquivos - Vers√£o Execut√°vel Interativa
Script que solicita par√¢metros do usu√°rio antes da execu√ß√£o
"""

import os
import sys
import json
from datetime import datetime
from pathlib import Path
from script import FileIntegrityChecker

class InteractiveFileChecker:
    """Classe para interface interativa do verificador"""
    
    def __init__(self):
        self.directories = []
        self.output_name = None
        self.recursive = True
        self.file_types = []
        self.auto_install_excel = False
        
    def print_header(self):
        """Exibir cabe√ßalho do programa"""
        print("=" * 60)
        print("üîç VERIFICADOR DE INTEGRIDADE DE ARQUIVOS")
        print("=" * 60)
        print("Este programa verifica a integridade de arquivos em diret√≥rios")
        print("detectando arquivos corrompidos, inacess√≠veis ou com problemas.")
        print("=" * 60)
        print()
    
    def validate_directory(self, path):
        """Validar se o diret√≥rio existe e √© acess√≠vel"""
        if not path.strip():
            return False, "Caminho n√£o pode estar vazio"
        
        if not os.path.exists(path):
            return False, f"Diret√≥rio n√£o encontrado: {path}"
        
        if not os.path.isdir(path):
            return False, f"Caminho n√£o √© um diret√≥rio: {path}"
        
        if not os.access(path, os.R_OK):
            return False, f"Sem permiss√£o de leitura: {path}"
        
        return True, "Diret√≥rio v√°lido"
    
    def get_directories(self):
        """Solicitar diret√≥rios para verifica√ß√£o"""
        print("üìÅ CONFIGURA√á√ÉO DE DIRET√ìRIOS")
        print("-" * 30)
        
        while True:
            if not self.directories:
                print("Digite o caminho do diret√≥rio a ser verificado:")
                print("(Obrigat√≥rio - digite pelo menos um diret√≥rio)")
            else:
                print(f"\nDiret√≥rios j√° adicionados: {len(self.directories)}")
                for i, d in enumerate(self.directories, 1):
                    print(f"  {i}. {d}")
                print("\nDeseja adicionar outro diret√≥rio? (s/n) ou digite o caminho:")
            
            user_input = input(">>> ").strip()
            
            if not user_input:
                if self.directories:
                    break
                else:
                    print("‚ùå Erro: Pelo menos um diret√≥rio deve ser especificado!")
                    continue
            
            if user_input.lower() in ['n', 'nao', 'n√£o', 'no']:
                if self.directories:
                    break
                else:
                    print("‚ùå Erro: Pelo menos um diret√≥rio deve ser especificado!")
                    continue
            
            if user_input.lower() in ['s', 'sim', 'yes', 'y']:
                continue
            
            # Tratar como caminho de diret√≥rio
            valid, message = self.validate_directory(user_input)
            if valid:
                abs_path = os.path.abspath(user_input)
                if abs_path not in self.directories:
                    self.directories.append(abs_path)
                    print(f"‚úÖ Diret√≥rio adicionado: {abs_path}")
                else:
                    print(f"‚ö†Ô∏è  Diret√≥rio j√° foi adicionado: {abs_path}")
            else:
                print(f"‚ùå {message}")
                print("Tente novamente ou pressione Enter para continuar.")
        
        print(f"\n‚úÖ {len(self.directories)} diret√≥rio(s) configurado(s) para verifica√ß√£o.")
    
    def get_output_settings(self):
        """Configurar op√ß√µes de sa√≠da"""
        print("\nüìÑ CONFIGURA√á√ÉO DE SA√çDA")
        print("-" * 25)
        
        # Nome do arquivo de sa√≠da
        while True:
            print("Digite o nome base para os arquivos de relat√≥rio:")
            print("(Opcional - pressione Enter para usar nome autom√°tico)")
            output_input = input(">>> ").strip()
            
            if not output_input:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                self.output_name = f"relatorio_integridade_{timestamp}"
                print(f"‚úÖ Nome autom√°tico: {self.output_name}")
                break
            
            # Validar nome do arquivo
            if any(char in output_input for char in '<>:"/\\|?*'):
                print("‚ùå Nome cont√©m caracteres inv√°lidos. Tente novamente.")
                continue
            
            self.output_name = output_input
            print(f"‚úÖ Nome definido: {self.output_name}")
            break
    
    def get_filter_options(self):
        """Configurar filtros opcionais"""
        print("\nüéØ FILTROS OPCIONAIS")
        print("-" * 20)
        
        # Busca recursiva
        while True:
            recursive_input = input("Verificar subdiret√≥rios recursivamente? (S/n): ").strip().lower()
            if recursive_input in ['', 's', 'sim', 'yes', 'y']:
                self.recursive = True
                print("‚úÖ Busca recursiva ativada")
                break
            elif recursive_input in ['n', 'nao', 'n√£o', 'no']:
                self.recursive = False
                print("‚úÖ Busca apenas no diret√≥rio principal")
                break
            else:
                print("‚ùå Digite 's' para sim ou 'n' para n√£o")
        
        # Filtro por tipos de arquivo
        print("\nFiltrar por tipos de arquivo espec√≠ficos?")
        print("Exemplos: csv, json, xlsx, pdf, txt, py, sql")
        print("(Opcional - pressione Enter para verificar todos os tipos)")
        
        types_input = input(">>> ").strip()
        if types_input:
            self.file_types = [t.strip().lower() for t in types_input.split(',')]
            self.file_types = [t if t.startswith('.') else f'.{t}' for t in self.file_types]
            print(f"‚úÖ Filtros configurados: {', '.join(self.file_types)}")
        else:
            print("‚úÖ Verificando todos os tipos de arquivo")
        
        # Configura√ß√£o para arquivos Excel
        self.get_excel_options()
    
    def get_excel_options(self):
        """Configurar op√ß√µes avan√ßadas para arquivos Excel"""
        # Verificar se h√° interesse em arquivos Excel
        has_excel = False
        
        if not self.file_types:  # Se verificando todos os tipos
            has_excel = True
        else:
            excel_types = ['.xlsx', '.xls']
            has_excel = any(ext in self.file_types for ext in excel_types)
        
        if not has_excel:
            return  # N√£o precisa configurar Excel
        
        print("\nüìä CONFIGURA√á√ïES PARA ARQUIVOS EXCEL")
        print("-" * 35)
        print("Detectados arquivos Excel (.xlsx/.xls) para verifica√ß√£o.")
        print("Para an√°lise completa √© necess√°rio o m√≥dulo 'pandas'.")
        print()
        print("Com pandas instalado voc√™ ter√°:")
        print("  ‚Ä¢ Contagem de planilhas e c√©lulas")
        print("  ‚Ä¢ An√°lise de tipos de dados")
        print("  ‚Ä¢ Detec√ß√£o de c√©lulas vazias/corrompidas")
        print("  ‚Ä¢ Verifica√ß√£o estrutural completa")
        print()
        
        while True:
            excel_input = input("Instalar automaticamente depend√™ncias Excel se necess√°rio? (S/n): ").strip().lower()
            if excel_input in ['', 's', 'sim', 'yes', 'y']:
                self.auto_install_excel = True
                print("‚úÖ Instala√ß√£o autom√°tica de depend√™ncias Excel ativada")
                break
            elif excel_input in ['n', 'nao', 'n√£o', 'no']:
                self.auto_install_excel = False
                print("‚úÖ Usando verifica√ß√£o b√°sica de Excel (sem pandas)")
                break
            else:
                print("‚ùå Digite 's' para sim ou 'n' para n√£o")
    
    def show_summary(self):
        """Exibir resumo das configura√ß√µes"""
        print("\nüìã RESUMO DAS CONFIGURA√á√ïES")
        print("=" * 30)
        print(f"Diret√≥rios: {len(self.directories)}")
        for i, d in enumerate(self.directories, 1):
            print(f"  {i}. {d}")
        print(f"Arquivo de sa√≠da: {self.output_name}")
        print(f"Busca recursiva: {'Sim' if self.recursive else 'N√£o'}")
        if self.file_types:
            print(f"Filtros: {', '.join(self.file_types)}")
        else:
            print("Filtros: Nenhum (todos os arquivos)")
        print(f"Auto-instalar Excel: {'Sim' if self.auto_install_excel else 'N√£o'}")
        print("=" * 30)
    
    def confirm_execution(self):
        """Confirmar execu√ß√£o"""
        while True:
            confirm = input("\nDeseja prosseguir com a verifica√ß√£o? (S/n): ").strip().lower()
            if confirm in ['', 's', 'sim', 'yes', 'y']:
                return True
            elif confirm in ['n', 'nao', 'n√£o', 'no']:
                return False
            else:
                print("‚ùå Digite 's' para sim ou 'n' para n√£o")
    
    def execute_check(self):
        """Executar verifica√ß√£o de integridade"""
        print("\nüîç EXECUTANDO VERIFICA√á√ÉO DE INTEGRIDADE")
        print("=" * 45)
        
        # Criar verificador customizado
        checker = CustomFileChecker(self.directories, self.recursive, self.file_types, self.auto_install_excel)
        
        try:
            # Executar verifica√ß√£o
            print("Iniciando verifica√ß√£o...")
            checker.scan_directories()
            
            # Gerar relat√≥rio em texto
            print("Gerando relat√≥rio...")
            checker.generate_text_report(self.output_name)
            
            # Mostrar resultados
            print("\n‚úÖ VERIFICA√á√ÉO CONCLU√çDA!")
            print("=" * 25)
            print(f"Total de arquivos verificados: {checker.summary['total_files']}")
            print(f"Arquivos √≠ntegros: {checker.summary['intact_files']}")
            print(f"Arquivos corrompidos: {checker.summary['corrupted_files']}")
            print(f"Arquivos inacess√≠veis: {checker.summary['inaccessible_files']}")
            
            if checker.summary['total_files'] > 0:
                intact_pct = (checker.summary['intact_files'] / checker.summary['total_files']) * 100
                print(f"Taxa de integridade: {intact_pct:.1f}%")
            
            print(f"\nüìÑ Relat√≥rio salvo em: {self.output_name}.txt")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå ERRO DURANTE A EXECU√á√ÉO!")
            print(f"Erro: {str(e)}")
            return False
    
    def run(self):
        """Executar interface interativa completa"""
        try:
            self.print_header()
            self.get_directories()
            self.get_output_settings()
            self.get_filter_options()
            self.show_summary()
            
            if self.confirm_execution():
                success = self.execute_check()
                
                if success:
                    print("\nüéâ Programa executado com sucesso!")
                    input("Pressione Enter para sair...")
                else:
                    print("\nüí• Ocorreu um erro durante a execu√ß√£o.")
                    input("Pressione Enter para sair...")
            else:
                print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
        
        except KeyboardInterrupt:
            print("\n\n‚ùå Opera√ß√£o cancelada pelo usu√°rio (Ctrl+C)")
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {str(e)}")


class CustomFileChecker(FileIntegrityChecker):
    """Vers√£o customizada do verificador para interface interativa"""
    
    def __init__(self, directories, recursive=True, file_types=None, auto_install_excel=False):
        super().__init__(directories, output_format='txt', auto_install_excel=auto_install_excel)
        self.recursive = recursive
        self.file_types = file_types or []
    
    def should_check_file(self, file_path):
        """Verificar se arquivo deve ser processado baseado nos filtros"""
        if not self.file_types:
            return True
        
        file_ext = Path(file_path).suffix.lower()
        return file_ext in self.file_types
    
    def scan_directories(self):
        """Escanear diret√≥rios com suporte a filtros"""
        print(f"Iniciando verifica√ß√£o de integridade em {len(self.directories)} diret√≥rios")
        
        for directory in self.directories:
            print(f"Escaneando: {directory}")
            
            if not os.path.exists(directory):
                print(f"‚ö†Ô∏è  Diret√≥rio n√£o encontrado: {directory}")
                continue
            
            if self.recursive:
                # Percorrer recursivamente
                for root, dirs, files in os.walk(directory):
                    for file in files:
                        file_path = os.path.join(root, file)
                        
                        if self.should_check_file(file_path):
                            self.process_file(file_path)
            else:
                # Apenas diret√≥rio principal
                try:
                    for item in os.listdir(directory):
                        file_path = os.path.join(directory, item)
                        
                        if os.path.isfile(file_path) and self.should_check_file(file_path):
                            self.process_file(file_path)
                except PermissionError:
                    print(f"‚ö†Ô∏è  Sem permiss√£o para ler diret√≥rio: {directory}")
        
        print(f"Verifica√ß√£o conclu√≠da. Total: {self.summary['total_files']} arquivos")
    
    def process_file(self, file_path):
        """Processar um arquivo individual"""
        try:
            result = self.check_file_integrity(file_path)
            self.results.append(result)
            
            # Atualizar sum√°rio
            self.summary['total_files'] += 1
            
            if result['integrity_status'] == 'INTACT':
                self.summary['intact_files'] += 1
            elif result['integrity_status'] == 'CORRUPTED':
                self.summary['corrupted_files'] += 1
            elif result['integrity_status'] == 'INACCESSIBLE':
                self.summary['inaccessible_files'] += 1
                
            # Mostrar progresso a cada 100 arquivos
            if self.summary['total_files'] % 100 == 0:
                print(f"  Processados: {self.summary['total_files']} arquivos...")
                
        except Exception as e:
            print(f"‚ùå Erro ao processar {file_path}: {e}")
    
    def generate_text_report(self, output_name):
        """Gerar relat√≥rio completo em formato texto"""
        report_file = f"{output_name}.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            # Cabe√ßalho
            f.write("=" * 80 + "\n")
            f.write("                RELAT√ìRIO DE INTEGRIDADE DE ARQUIVOS\n")
            f.write("=" * 80 + "\n\n")
            
            # Informa√ß√µes gerais
            f.write(f"Data da verifica√ß√£o: {self.summary['scan_date']}\n")
            f.write(f"Diret√≥rios verificados: {len(self.directories)}\n")
            for i, d in enumerate(self.directories, 1):
                f.write(f"  {i}. {d}\n")
            f.write(f"Busca recursiva: {'Sim' if self.recursive else 'N√£o'}\n")
            if self.file_types:
                f.write(f"Filtros aplicados: {', '.join(self.file_types)}\n")
            f.write("\n")
            
            # Resumo estat√≠stico
            f.write("RESUMO ESTAT√çSTICO\n")
            f.write("-" * 20 + "\n")
            f.write(f"Total de arquivos verificados: {self.summary['total_files']:,}\n")
            f.write(f"Arquivos √≠ntegros: {self.summary['intact_files']:,}\n")
            f.write(f"Arquivos corrompidos: {self.summary['corrupted_files']:,}\n")
            f.write(f"Arquivos inacess√≠veis: {self.summary['inaccessible_files']:,}\n")
            
            if self.summary['total_files'] > 0:
                intact_pct = (self.summary['intact_files'] / self.summary['total_files']) * 100
                corrupted_pct = (self.summary['corrupted_files'] / self.summary['total_files']) * 100
                inaccessible_pct = (self.summary['inaccessible_files'] / self.summary['total_files']) * 100
                
                f.write(f"\nPERCENTUAIS:\n")
                f.write(f"Taxa de integridade: {intact_pct:.1f}%\n")
                f.write(f"Taxa de corrup√ß√£o: {corrupted_pct:.1f}%\n")
                f.write(f"Taxa de inacessibilidade: {inaccessible_pct:.1f}%\n")
            
            f.write("\n" + "=" * 80 + "\n\n")
            
            # Arquivos corrompidos
            corrupted_files = [r for r in self.results if r['integrity_status'] == 'CORRUPTED']
            if corrupted_files:
                f.write("ARQUIVOS CORROMPIDOS\n")
                f.write("-" * 20 + "\n")
                for i, result in enumerate(corrupted_files, 1):
                    f.write(f"{i:3d}. {result['file_path']}\n")
                    f.write(f"     Tamanho: {result['file_size']:,} bytes\n")
                    f.write(f"     Modificado: {result.get('last_modified', 'N/A')}\n")
                    if result.get('error'):
                        f.write(f"     Erro: {result['error']}\n")
                    if 'specific_checks' in result and 'error' in result['specific_checks']:
                        f.write(f"     Detalhes: {result['specific_checks']['error']}\n")
                    f.write("\n")
                f.write("\n")
            
            # Arquivos inacess√≠veis
            inaccessible_files = [r for r in self.results if r['integrity_status'] == 'INACCESSIBLE']
            if inaccessible_files:
                f.write("ARQUIVOS INACESS√çVEIS\n")
                f.write("-" * 21 + "\n")
                for i, result in enumerate(inaccessible_files, 1):
                    f.write(f"{i:3d}. {result['file_path']}\n")
                    if result.get('error'):
                        f.write(f"     Erro: {result['error']}\n")
                    f.write("\n")
                f.write("\n")
            
            # Lista completa de todos os arquivos
            f.write("LISTA COMPLETA DE ARQUIVOS VERIFICADOS\n")
            f.write("-" * 38 + "\n")
            f.write("Status | Tamanho    | Arquivo\n")
            f.write("-" * 60 + "\n")
            
            status_symbols = {
                'INTACT': '  ‚úÖ   ',
                'CORRUPTED': '  ‚ùå   ',
                'INACCESSIBLE': '  üö´   ',
                'UNKNOWN': '  ‚ùì   '
            }
            
            for result in sorted(self.results, key=lambda x: x['file_path']):
                status = result['integrity_status']
                symbol = status_symbols.get(status, '  ?   ')
                size = f"{result['file_size']:>10,}"
                file_path = result['file_path']
                
                f.write(f"{symbol} | {size} | {file_path}\n")
            
            f.write("\n" + "=" * 80 + "\n")
            f.write("Relat√≥rio gerado pelo Verificador de Integridade de Arquivos\n")
            f.write(f"Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write("=" * 80 + "\n")


def main():
    """Fun√ß√£o principal do execut√°vel interativo"""
    try:
        interactive_checker = InteractiveFileChecker()
        interactive_checker.run()
    except Exception as e:
        print(f"Erro fatal: {e}")
        input("Pressione Enter para sair...")


if __name__ == "__main__":
    main()